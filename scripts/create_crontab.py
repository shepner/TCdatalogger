#!/usr/bin/env python3
"""Create crontab entries for TCdatalogger endpoints.

This script reads the TC_API_config.json file and creates appropriate
crontab entries for each endpoint using only standard library functions.
"""

import json
import os
import re
from datetime import datetime
from pathlib import Path

def parse_iso_duration(duration: str) -> int:
    """Parse ISO 8601 duration string into minutes.
    
    Args:
        duration: ISO duration string (e.g., "PT15M", "PT1H", "P1D")
        
    Returns:
        int: Duration in minutes
    """
    # Extract numbers and units using regex
    pattern = r'P(?:(\d+)D)?T?(?:(\d+)H)?(?:(\d+)M)?'
    match = re.match(pattern, duration)
    if not match:
        raise ValueError(f"Invalid duration format: {duration}")
    
    days, hours, minutes = match.groups()
    total_minutes = 0
    
    if days:
        total_minutes += int(days) * 24 * 60
    if hours:
        total_minutes += int(hours) * 60
    if minutes:
        total_minutes += int(minutes)
        
    return total_minutes

def duration_to_cron(minutes: int) -> str:
    """Convert duration in minutes to cron schedule expression.
    
    Args:
        minutes: Duration in minutes
        
    Returns:
        str: Cron schedule expression
    """
    if minutes < 1:
        raise ValueError("Duration must be at least 1 minute")
    
    if minutes == 1440:  # Daily
        return "0 0 * * *"
    elif minutes == 720:  # 12 hours
        return "0 */12 * * *"
    elif minutes == 60:  # Hourly
        return "0 * * * *"
    elif minutes < 60:  # Minutes
        return f"*/{minutes} * * * *"
    else:  # Convert to hours if possible
        hours = minutes / 60
        if hours.is_integer():
            return f"0 */{int(hours)} * * *"
        return f"*/{minutes} * * *"

def main():
    """Generate crontab entries for all endpoints."""
    # Get workspace directory
    workspace_dir = Path(__file__).parent.parent.absolute()
    
    # Load configuration
    config_file = workspace_dir / "config" / "TC_API_config.json"
    with open(config_file) as f:
        config = json.load(f)
    
    # Generate crontab entries
    cron_jobs = [
        "# TCdatalogger Automated Cron Jobs",
        "# DO NOT EDIT MANUALLY - Generated by create_crontab.py",
        "SHELL=/bin/zsh",
        f"PATH=/usr/local/bin:/usr/bin:/bin:{workspace_dir}/scripts",
        f"WORKSPACE_DIR={workspace_dir}",
        f"GOOGLE_APPLICATION_CREDENTIALS={workspace_dir}/config/credentials.json",
        ""
    ]
    
    # Add jobs for each endpoint
    for endpoint in config.get("endpoints", []):
        name = endpoint["name"]
        frequency = endpoint.get("frequency", "PT15M")
        
        try:
            minutes = parse_iso_duration(frequency)
            schedule = duration_to_cron(minutes)
            
            # Create the cron command with environment setup
            cmd = f"cd {workspace_dir} && PYTHONPATH={workspace_dir} ./scripts/setup.py main --endpoint {name} >> {workspace_dir}/logs/{name}.log 2>&1"
            cron_jobs.append(f"{schedule} {cmd}")
            
        except Exception as e:
            print(f"Error processing endpoint {name}: {e}")
    
    # Write crontab to file
    crontab_file = workspace_dir / "config" / "crontab"
    with open(crontab_file, "w") as f:
        f.write("\n".join(cron_jobs) + "\n")
    
    print(f"Generated crontab file at: {crontab_file}")
    print("\nTo install the crontab, run:")
    print(f"crontab {crontab_file}")

if __name__ == "__main__":
    main() 